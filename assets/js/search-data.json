{
  
    
        "post0": {
            "title": "Youtube Transcript Summarization using Hugging Face Transformers",
            "content": ". Motivation . Show an example of using a Hugging Face model out the box for a practical use case. One of the practical use cases of this tutorial is to save time. If you&#39;re able to summarize a video&#39;s transcripts before watching you can determine if you want to watch it or not. Another use case is for studying, can get a mini preview of a lecture before you start. . In this tutorial, we will learn how to use the Youtube Transcript API to fetch transcripts of youtube videos given the url. Then we will take the transcripts and pass them through a pre-trained BART Language Model to summarize the transcript. . Code . import json import urllib import urllib.request from pprint import pprint from youtube_transcript_api import YouTubeTranscriptApi from transformers import BartTokenizer, BartForConditionalGeneration, BartConfig . . Warning: The following function will fail if the Youtube video provided doesn&#8217;t have transcripts . def transcribe_video_from_url(url): # Get transcript if transcript available video_id = url.split(&quot;watch?v=&quot;) video_id = video_id[1] transcript_dict = YouTubeTranscriptApi.get_transcript(video_id) transcript = &quot;&quot; for i in transcript_dict: transcript += &#39; &#39; + i[&#39;text&#39;] # Get video title params = {&quot;format&quot;: &quot;json&quot;, &quot;url&quot;: &quot;https://www.youtube.com/watch?v=%s&quot; % video_id} url = &quot;https://www.youtube.com/oembed&quot; query_string = urllib.parse.urlencode(params) url = url + &quot;?&quot; + query_string with urllib.request.urlopen(url) as response: response_text = response.read() data = json.loads(response_text.decode()) video_title = data[&#39;title&#39;] return transcript, video_title . model = BartForConditionalGeneration.from_pretrained(&#39;facebook/bart-large-cnn&#39;) tokenizer = BartTokenizer.from_pretrained(&#39;facebook/bart-large-cnn&#39;) . def summarize_transcript(transcript): inputs = tokenizer.batch_encode_plus([transcript], max_length=1024, return_tensors=&#39;pt&#39;, truncation=True) summary_ids = model.generate(inputs[&#39;input_ids&#39;]) summary = [tokenizer.decode(ids, skip_special_tokens=True, clean_up_tokenization_spaces=False) for ids in summary_ids] return summary . Example . For our example we&#39;ll be using this video on Jim Quik&#39;s morning routine. . . example_url = &quot;https://www.youtube.com/watch?v=igUEGiQgZhA&quot; . example_transcript, video_title = transcribe_video_from_url(example_url) len(example_transcript), video_title . (17125, &#39;Kwik Brain Episode 16: My Morning Routine - How to Jumpstart Your Brain &amp; Day&#39;) . example_summary = summarize_transcript(example_transcript) pprint(example_summary) . [&#39;Jim quick shows you how to jump-start your brain and your day for greater &#39; &#39;productivity and peace of mind. The first thing he does when he wakes up is &#39; &#39;to recall his dreams. After that he makes his bed and takes his supplements. &#39; &#39;He also gives you some tips on how to get fast and restful sleep.&#39;] . As you can see this worked pretty good for a straight out the box model. We were able to get the gist of what the video was about and determine if the video is worth our time. Thanks Hugging Face :hugs:! .",
            "url": "https://tshields44.github.io/blog/transformers/python/nlp/youtube/2020/10/26/Youtube-Transcript-Summarizer.html",
            "relUrl": "/transformers/python/nlp/youtube/2020/10/26/Youtube-Transcript-Summarizer.html",
            "date": " • Oct 26, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://tshields44.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tshields44.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}